访客群应用需求
============
    为社区易受关注的用户(明星用户/高等级用户)提供一个 *访客群* 即时聊天的功能, 增加用户粘度.

    该文档中将这些易受关注用户的用户称为特殊用户.


解决方法
=======
    在社区当前实现了好友邀请, 站内信, 新鲜事 即时推送的基础上, 以下两种方案可实现访客群:
    1, 扩展命令:
        在现有的 push 模型基础上, 添加新的通信管道和命令, 使用现有的服务器为其推送.
        优点: 浏览器客户端不用建立新的 mps 对象, 不用建立到新的即时通信域名的长连接.
        缺点: push 服务器的压力会增大(后面会有压力分析)

    2, 扩展服务器:
        开发, 部署新的服务器和域名专门实现访客群功能.
        优点: 不会额外增加现有 push 服务器压力, 结构清晰.
        缺点: 浏览器需要同时建立两条到后台服务器的长连接, 可能会引起部分页面无法加载.


压力分析
=======
    方法 1 在现有的通信基础上需要增加以下几种通信请求:
    FKQ_JOIN 所有特殊用户的社区页面被访问时, 需要在用户CONNECT的同时, 增加一条FKQ_JOIN请求.
    FKQ_SEND 发送用户的聊天信息, 该组所有用户可收到.

    除此之外, push 服务器不会有其他新增的压力(长连接个数不会增加,
    因为可与社区站内信的长连接重用),
    所以, 新增压力与我们开放的特殊用户的个数, 和访问这些用户页面的用户数有关.

    假设我们开放了 1万 个特殊用户, 平均每秒钟有 1000 个特殊用户有 20 个访客在线,
    每个群一秒钟一条消息.
    每秒大概会有 1000 条数据需要传送到 20000 个客户端.

    由于社区已经存在了到 push 服务器的长连接, 访客群的功能可以重用该长连接,
    而访客群作为社区产品的一个附加功能, 我也更倾向于采取扩展命令的方式来实现.
    为了防止服务器压力过大导致运维故障, 我们可以在运维上采取逐步放开特殊用户数量的方式.
    运维的同时, 开发可以同步研究 push 服务器的扩展, 以支撑大量请求.


服务器端修改
==========
    服务器端逻辑需要做如下修改:
    针对某个特殊用户的首个 FKQ_JOIN 请求到达时, 需要建立一个通信频道,
    将后续所有针对这个用户的 FKQ_JOIN 连到这个管道,
    同时还需要将发送该命令的 subuser 标识为接受访客群消息.

    FKQ_SEND 命令可以扩展一个 pageclass, 专门用来指定访客群的消息,
    将该消息发送给所有关注该群的 subuser

    用户关闭聊天窗口时(该 subuser 离开时), 需要将聊天频道里面移除该用户.
