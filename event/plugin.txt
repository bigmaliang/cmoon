插件开发：
========


编写插件
-------
参考plugin/mevent_skeleton.c， 每个插件主要由以下三个函数组成：

static struct event_entry* skeleton_init_driver(void)
    初始化插件，返回一event_entry类型的结构体。开发人员可以扩展该结构体，
    将需要的数据（如文件指针、数据库连接等）保存在其中。
    作为示例，skeleton保存了一个文件指针。

static void skeleton_process_driver(struct event_entry *entry, struct queue_entry *q)
    该插件的事件处理函数，传入参数有两个：
    struct event_entry * 在init_driver()中解释过了，其中保存了该插件需要的公用数据。
    struct queue_entry * 保存了当前事件的相关信息，包括客户端信息、Request command、Flags、参数数据。

static void skeleton_stop_driver(struct event_entry *entry)
       关闭插件，释放资源。如关闭文件指针，数据库连接等。

最后还有一个全局的结构体
    struct event_driver skeleton_driver = {
        .name = (unsigned char*)PLUGIN_NAME,
        .init_driver = skeleton_init_driver,
    };
    该结构体用来初始化插件，结构体名请以PLUGIN_NAME_driver命名(PLUGIN_NAME为插件名字)。


开发新插件时可以拷贝mevent_skeleton.c，然后把其中的"skeleton" 替换成插件名就可以了。
另外，插件请统一放到 *应用* 的xport/plugin目录下，文件名以"mevent_PLUGIN_NAME.c"命名。如 pop/xport/plugin/mevent_aic.c

