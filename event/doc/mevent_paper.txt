摘要
关键字
	金鹰网 业务后台


社区事件中心工作原理及典型应用


事件中心角色
-----------
	网站开发过程中, 为了提高前台页面的响应速度 和 提供业务接口供前端使用.
常常需要实现一套对速度, 容量, 稳定性要求都比较高的后台程序和接口.
特别是对于社区项目这种资料存取逻辑功能清晰, 复用性高, 应用场合多样的产品,
同时还需要提供多种接口供不同应用使用.

	社区事件中心便是针对这样一种应用演变而来.
	
	本文主要介绍社区项目事件中心的工作模型 和 针对速度, 容量, 稳定性, 接口
问题的一些手段取舍.


事件中心运维模型
--------------
	事件中心以一个 daemon 进程的形式存在于后台服务器, 每个事件中心进程
可以根据配置文件运行单个 或 多个业务模块.  同时, 单个业务模块可以运行于多个服务进程,
以分布于不同的机器用来扩充业务容量.

	事件中心的客户端 (接口调用方) 以相应的配置往后端机器特定端口发送相关请求.

	事件中心的运维模型大体上跟 memcache 模型一致, 客户端可以根据对命令参数的 hash 做分布式请求.

	事件中心运维图:


事件中心服务器端工作模型
---------------------
	当前我们将社区的存取接口划分为几个大的模块, 例如用户信息业务, 分组管理业务, 成长信息业务等.
每个业务模块包含一组相关业务的命令接口, 每条命令实现一个逻辑相对独立的业务.  前端应用的调用方式为:
	输入: 业务编号 + 命令执行方式 + 命令号 + 命令参数
	输出: 操作返回值 + 业务数据

	其中, 命令执行方式分为同步和异步, 异步方式执行命令主要用来提高不关注操作结果的前端业务响应.
对于异步模式的命令, 执行失败的业务记录到日志里面, 可以视情况再次执行.

	服务器端逻辑图:


典型业务
-------
	1, 用户信息业务 + 同步执行 + 获取好友列表 + 用户号码  =  用户好友列表
	2, 成长信息业务 + 同步执行 + 增加经验 + 用户号码 + 经验数  =  操作返回值 + [操作后的经验数, 操作后的用户等级]
	   成长信息业务 + 异步执行 + 增加经验 + 用户号码 + 经验数  =  操作返回值


问题办法取舍
----------
速度
	速度是事件中心面临的首要问题, 其存在的价值也在于对用户速度体验的改善.
	udp 包
	业务逻辑后端实现, 减少网络请求次数
	epoll
	操作结果本机内存缓存(当前结果缓存无过期时间支持)
	业务操作本机队列缓存(当前队列没有优先级支持)

容量
	根据事件中心的运维模型, 我们可以看出, 对于并发量大的业务模块,
我们可以选择将其部署在多台服务器上, 在客户端上通过配置文件的方式将业务请求
发往不同的后台服务器处理.

	这样虽然可以达到对业务容量的平行扩展, 另外也对业务拆分提出了较高的要求.
将社区资料存取的接口划分成多个便于扩展的业务模块需要对整个社区的业务逻辑有较
全面的整体认识.

	目前来看, 客户端选择后台处理机器是根据对参数的 hash 进行定向.  这样跟 memcache
的机制一样可以有效避免缓存冗余, 但也没有对后台处理机器做负载均衡判断.


稳定性
	对于事件中心后台服务程序, 我们希望以
	每个后端业务逻辑一个单独的操作线程
	通过判断进程是否存在的方式监控每个事件中心进程
	通过分业务的心跳测试程序判断每个进程的业务逻辑是否正常响应
	
接口
	实际使用过程中, 可能会有多个应用使用社区的资料, 甚至一些不同语言实现的产品.
事件中心的多语言客户端 API 支持由此显得必要.  当前社区事件中心仅实现了C, 和PHP
端的API支持.

	前面提到过为了减少网络通信次数, 事件中心的业务逻辑全部放到服务器后端,
以业务插件的形式实现.  这样同时也简化了客户端API的工作, 对于多语言客户端,
不必重新实现一套相同的业务逻辑.  另外一方面, 这对于业务逻辑的开发人员也有一定要求,
目前来看, 必须知道事件中心后端插件的开发方式来实现新的业务逻辑.

	同时, 出于安全考虑, 事件中心走的 udp 网络通信协议是私有格式, 部署上也限制了
外网的直接访问.  这样, 同时也限制了第三方开发直接使用事件中心接口. 所以,
对于第三方插件开发需求, 需要另外提供一套基于类似 HTTP 的开放协议.


后记
----
	随着网站的运营, 网站架构会随着需求不断的变化, 事件中心目前在社区中也只是
支持了部分业务.  由于 udp 包长度的限制, 事件中心也不便支持大于 64KB 的数据请求.
另外, 对于读取类业务, 走内存队列的方式也显得有点冗余.  只是为了便于程序上的实现和一致性,
才采取了这种方式.

	笔者认为, 网站后台开发过程中, 最重要的还是对业务逻辑的划分和接口规范化,
最大程度上复用业务逻辑, 以减少应用端开发复杂度 和 工作量.
本文的目的在于给有类似需求的网站提供一个现实模型参考.


参考工具
-------
	1, nmdb			http://blitiri.com.ar/p/nmdb/
	2, memcached	http://memcached.org/

致谢
----
	事件中心开发指导
