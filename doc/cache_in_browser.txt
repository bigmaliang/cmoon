cgi 程序的浏览器端缓存:
====================

Cache-Control 可以用来控制 url 资源(html, pic, css, js, cgi...) 在浏览器端的缓存时间数,
不论这个头是在 程序里面输入, 还是在 Web 服务器返回请求的时候输出.  本文主要总结 cgi 在客户端
缓存的解决办法( web 服务器可能可以为 cgi 程序加上缓存控制, 如果你熟悉这些配置的话请跳过这段文章,
但如果你需要在 cgi 里面区分不同情况输出不同缓存时间的话, 还是在 cgi 里输出缓存头好一点).

max-age:

	FireFox 能够正确解析 HTTP 1.1 头中该字段的正确含义, 进行正确的操作, 包括 302 redirece 的源url.
	
	但 IE 有以下两点列外:
		1, 没有设 Cache-Control max-age 头用来指定缓存时间的 url 也可能被 IE 缓存, 看他的心情.
		   所以在发起不希望被缓存的 ajax/url 请求时, 请带上随机参数, 因为指不定请求被缓存住了.
		   Pragma: no-cache\r\n Cache-Control: private, no-cache 的时候可能不会缓存, 没有试验过,
		   如果前台无法加上随机参数的话可以考虑在这里指定不缓存.
		
		2, 设了 max-age 头, 但如果服务器上的时间不对, 或者时区不对的话, IE 的缓存将很难预料,
		   因为大部分 web 服务器会在返回里面自己加上 当前的 GMD 时间作为 Date,
		   貌似 firefox 只会以 max-age 的秒数来确定该页面是否需要缓存, 而 ie 却会根据页面返回的 Date
		   (或者 Expires )和 max-age 加上客户端上的系统时间一起来确定页面是否缓存, 所以最好还是确保
		   服务器 上时间和时区的正确性.



Expires 基本上可以放弃不用了(设计 Cache-Control 就是为了解决 Expire 时客户端和服务器端时间不同不的问题的),
自己的程序输出的话最好用 max-age 来实现客户端缓存.
Last-Modified	
Date
ETAG
之类的貌似也不是 cgi 里面控制缓存的最佳方案, 这些只有在 Web 服务器实现缓存的时候才用到.

另外, 加上 Date, Expires, Last-Modified, [ETAG] 也不能解决 服务器时间/时区 错误时,缓存无法预料的问题, 垃圾.


参考:
	1, clearsilver/cgi/cgi.c cgi_headers() 里对 http 协议头的处理
	2, google.cn, google.com 对缓存的处理
	3, x.soso.com 对缓存的处理
