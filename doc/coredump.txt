程序生成 core dump
=================

0, $export MALLOC_CHECK_=0 再执行程序可以取消double_free() 之类错误的 core dump

1, 普通程序可以通过以下两种方式 之一 确保生成 core 文件
    a, ulimit -S -c unlimit
    
    b, 程序内部写
    #include <sys/resource.h>
    struct rlimit rl;

    rl.rlim_cur = 10240;
    rl.rlim_max = 10240;
    setrlimit(RLIMIT_CORE, &rl);
    
2, 调用了 setuid() setgid() 改变运行身份的程序需要额外通过以下方式确保

    #include <sys/prctl.h>
    ...
    setuid(xxx);
    prctl(PR_SET_DUMPABLE, 1);

3, 若系统生成的core文件不带其它任何扩展名称, 则全部命名为core.
   新的core文件生成将覆盖原来的core文件.

   /proc/sys/kernel/core_uses_pid可以控制core文件的文件名中是否添加pid作为扩展.
   文件内容为1, 表示添加pid作为扩展名, 生成的core文件格式为core.xxxx;
   为0则表示生成的core文件同一命名为core.


4, /proc/sys/kernel/core_pattern 文件用来指定 core 的保存位置和文件名格式
   /corefile/core-%e-%p-%t
   如:
   /corefile/core-aped-18184-1253100745

    %p - insert pid into filename 添加pid
    %u - insert current uid into filename 添加当前uid
    %g - insert current gid into filename 添加当前gid
    %s - insert signal that caused the coredump into the filename 添加导致产生core的信号
    %t - insert UNIX time that the coredump occurred into filename 添加core文件生成时的unix时间
    %h - insert hostname where the coredump happened into filename 添加主机名
    %e - insert coredumping executable name into filename 添加命令名

5, 调试命令 gdb [exec file] [core file]


6, screen 可以用来调试长期才出错的程序
http://www.ibm.com/developerworks/cn/linux/l-cn-screen/
